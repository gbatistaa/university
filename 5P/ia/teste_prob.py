# -*- coding: utf-8 -*-
"""Probabilidade.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/10ryxci-58h9Db3y1DIPBFavfi4079neg
"""

!git clone https://github.com/aimacode/aima-python.git

# Commented out IPython magic to ensure Python compatibility.
# %cd aima-python

!pip install -r requirements.txt

from search import *
from probability import *
from utils import print_table

full_joint = JointProbDist(['Cavity', 'Toothache', 'Catch'])
full_joint[dict(Cavity=True, Toothache=True, Catch=True)] = 0.108
full_joint[dict(Cavity=True, Toothache=True, Catch=False)] = 0.012
full_joint[dict(Cavity=True, Toothache=False, Catch=True)] = 0.016
full_joint[dict(Cavity=True, Toothache=False, Catch=False)] = 0.064
full_joint[dict(Cavity=False, Toothache=True, Catch=True)] = 0.072
full_joint[dict(Cavity=False, Toothache=False, Catch=True)] = 0.144
full_joint[dict(Cavity=False, Toothache=True, Catch=False)] = 0.008
full_joint[dict(Cavity=False, Toothache=False, Catch=False)] = 0.576

# P(toothache)

evidence = dict(Toothache = True)
variables = ['Cavity', 'Catch']
ans1 = enumerate_joint(variables, evidence, full_joint)
ans1

# P(cavity * toothache)

evidence = dict(Cavity = True, Toothache = True)
variables = ['Catch']
ans2 = enumerate_joint(variables, evidence, full_joint)
ans2

# P(cavity|toothache)

ans2 / ans1

# P(Cavity|toothache)

query_variable = 'Cavity'
evidence = dict(Toothache = True)
ans = enumerate_joint_ask(query_variable, evidence, full_joint)
(ans[True], ans[False])

# P(Toothache|catch)

query_variable = 'Toothache'
evidence = dict(Catch = True)
ans = enumerate_joint_ask(query_variable, evidence, full_joint)
(ans[True], ans[False])

# P(Toothache|cavity)

query_variable = 'Toothache'
evidence = dict(Cavity = True)
ans = enumerate_joint_ask(query_variable, evidence, full_joint)
(ans[True], ans[False])

# P(Cavity|toothache,Â¬catch)

query_variable = 'Cavity'
evidence = dict(Toothache = True, Catch = False)
ans = enumerate_joint_ask(query_variable, evidence, full_joint)
(ans[True], ans[False])

# P(Catch|Â¬cavity)

query_variable = 'Catch'
evidence = dict(Cavity = True)
ans = enumerate_joint_ask(query_variable, evidence, full_joint)
(ans[True], ans[False])
